// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: borrowers.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BorrowerService_CreateBorrower_FullMethodName    = "/protos.BorrowerService/CreateBorrower"
	BorrowerService_UpdateBorrower_FullMethodName    = "/protos.BorrowerService/UpdateBorrower"
	BorrowerService_DeleteBorrower_FullMethodName    = "/protos.BorrowerService/DeleteBorrower"
	BorrowerService_GetByIdBorrower_FullMethodName   = "/protos.BorrowerService/GetByIdBorrower"
	BorrowerService_GetAllBorrowers_FullMethodName   = "/protos.BorrowerService/GetAllBorrowers"
	BorrowerService_GetAllIdBorrowers_FullMethodName = "/protos.BorrowerService/GetAllIdBorrowers"
)

// BorrowerServiceClient is the client API for BorrowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowerServiceClient interface {
	CreateBorrower(ctx context.Context, in *BorrowerReq, opts ...grpc.CallOption) (*Void, error)
	UpdateBorrower(ctx context.Context, in *BorrowerRes, opts ...grpc.CallOption) (*Void, error)
	DeleteBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetByIdBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*BorrowerRes, error)
	GetAllBorrowers(ctx context.Context, in *FilterBorrower, opts ...grpc.CallOption) (*AllBorrowers, error)
	GetAllIdBorrowers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllBorrowers, error)
}

type borrowerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowerServiceClient(cc grpc.ClientConnInterface) BorrowerServiceClient {
	return &borrowerServiceClient{cc}
}

func (c *borrowerServiceClient) CreateBorrower(ctx context.Context, in *BorrowerReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowerService_CreateBorrower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) UpdateBorrower(ctx context.Context, in *BorrowerRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowerService_UpdateBorrower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) DeleteBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowerService_DeleteBorrower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetByIdBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*BorrowerRes, error) {
	out := new(BorrowerRes)
	err := c.cc.Invoke(ctx, BorrowerService_GetByIdBorrower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetAllBorrowers(ctx context.Context, in *FilterBorrower, opts ...grpc.CallOption) (*AllBorrowers, error) {
	out := new(AllBorrowers)
	err := c.cc.Invoke(ctx, BorrowerService_GetAllBorrowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetAllIdBorrowers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AllBorrowers, error) {
	out := new(AllBorrowers)
	err := c.cc.Invoke(ctx, BorrowerService_GetAllIdBorrowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowerServiceServer is the server API for BorrowerService service.
// All implementations must embed UnimplementedBorrowerServiceServer
// for forward compatibility
type BorrowerServiceServer interface {
	CreateBorrower(context.Context, *BorrowerReq) (*Void, error)
	UpdateBorrower(context.Context, *BorrowerRes) (*Void, error)
	DeleteBorrower(context.Context, *ById) (*Void, error)
	GetByIdBorrower(context.Context, *ById) (*BorrowerRes, error)
	GetAllBorrowers(context.Context, *FilterBorrower) (*AllBorrowers, error)
	GetAllIdBorrowers(context.Context, *Void) (*AllBorrowers, error)
	mustEmbedUnimplementedBorrowerServiceServer()
}

// UnimplementedBorrowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowerServiceServer struct {
}

func (UnimplementedBorrowerServiceServer) CreateBorrower(context.Context, *BorrowerReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) UpdateBorrower(context.Context, *BorrowerRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) DeleteBorrower(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) GetByIdBorrower(context.Context, *ById) (*BorrowerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) GetAllBorrowers(context.Context, *FilterBorrower) (*AllBorrowers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBorrowers not implemented")
}
func (UnimplementedBorrowerServiceServer) GetAllIdBorrowers(context.Context, *Void) (*AllBorrowers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIdBorrowers not implemented")
}
func (UnimplementedBorrowerServiceServer) mustEmbedUnimplementedBorrowerServiceServer() {}

// UnsafeBorrowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowerServiceServer will
// result in compilation errors.
type UnsafeBorrowerServiceServer interface {
	mustEmbedUnimplementedBorrowerServiceServer()
}

func RegisterBorrowerServiceServer(s grpc.ServiceRegistrar, srv BorrowerServiceServer) {
	s.RegisterService(&BorrowerService_ServiceDesc, srv)
}

func _BorrowerService_CreateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).CreateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_CreateBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).CreateBorrower(ctx, req.(*BorrowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_UpdateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).UpdateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_UpdateBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).UpdateBorrower(ctx, req.(*BorrowerRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_DeleteBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).DeleteBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_DeleteBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).DeleteBorrower(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetByIdBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetByIdBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetByIdBorrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetByIdBorrower(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetAllBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterBorrower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetAllBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetAllBorrowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetAllBorrowers(ctx, req.(*FilterBorrower))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetAllIdBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetAllIdBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowerService_GetAllIdBorrowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetAllIdBorrowers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowerService_ServiceDesc is the grpc.ServiceDesc for BorrowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BorrowerService",
	HandlerType: (*BorrowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBorrower",
			Handler:    _BorrowerService_CreateBorrower_Handler,
		},
		{
			MethodName: "UpdateBorrower",
			Handler:    _BorrowerService_UpdateBorrower_Handler,
		},
		{
			MethodName: "DeleteBorrower",
			Handler:    _BorrowerService_DeleteBorrower_Handler,
		},
		{
			MethodName: "GetByIdBorrower",
			Handler:    _BorrowerService_GetByIdBorrower_Handler,
		},
		{
			MethodName: "GetAllBorrowers",
			Handler:    _BorrowerService_GetAllBorrowers_Handler,
		},
		{
			MethodName: "GetAllIdBorrowers",
			Handler:    _BorrowerService_GetAllIdBorrowers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "borrowers.proto",
}
