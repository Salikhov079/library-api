// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: genres.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenreService_CreateGenre_FullMethodName  = "/protos.GenreService/CreateGenre"
	GenreService_UpdateGenre_FullMethodName  = "/protos.GenreService/UpdateGenre"
	GenreService_DeleteGenre_FullMethodName  = "/protos.GenreService/DeleteGenre"
	GenreService_GetByIdGenre_FullMethodName = "/protos.GenreService/GetByIdGenre"
	GenreService_GetAllGenres_FullMethodName = "/protos.GenreService/GetAllGenres"
)

// GenreServiceClient is the client API for GenreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreServiceClient interface {
	CreateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Void, error)
	UpdateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Void, error)
	DeleteGenre(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetByIdGenre(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Genre, error)
	GetAllGenres(ctx context.Context, in *FilterGenre, opts ...grpc.CallOption) (*AllGenres, error)
}

type genreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreServiceClient(cc grpc.ClientConnInterface) GenreServiceClient {
	return &genreServiceClient{cc}
}

func (c *genreServiceClient) CreateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenreService_CreateGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) UpdateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenreService_UpdateGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) DeleteGenre(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, GenreService_DeleteGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetByIdGenre(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, GenreService_GetByIdGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetAllGenres(ctx context.Context, in *FilterGenre, opts ...grpc.CallOption) (*AllGenres, error) {
	out := new(AllGenres)
	err := c.cc.Invoke(ctx, GenreService_GetAllGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreServiceServer is the server API for GenreService service.
// All implementations must embed UnimplementedGenreServiceServer
// for forward compatibility
type GenreServiceServer interface {
	CreateGenre(context.Context, *Genre) (*Void, error)
	UpdateGenre(context.Context, *Genre) (*Void, error)
	DeleteGenre(context.Context, *ById) (*Void, error)
	GetByIdGenre(context.Context, *ById) (*Genre, error)
	GetAllGenres(context.Context, *FilterGenre) (*AllGenres, error)
	mustEmbedUnimplementedGenreServiceServer()
}

// UnimplementedGenreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenreServiceServer struct {
}

func (UnimplementedGenreServiceServer) CreateGenre(context.Context, *Genre) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedGenreServiceServer) UpdateGenre(context.Context, *Genre) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedGenreServiceServer) DeleteGenre(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedGenreServiceServer) GetByIdGenre(context.Context, *ById) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdGenre not implemented")
}
func (UnimplementedGenreServiceServer) GetAllGenres(context.Context, *FilterGenre) (*AllGenres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedGenreServiceServer) mustEmbedUnimplementedGenreServiceServer() {}

// UnsafeGenreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreServiceServer will
// result in compilation errors.
type UnsafeGenreServiceServer interface {
	mustEmbedUnimplementedGenreServiceServer()
}

func RegisterGenreServiceServer(s grpc.ServiceRegistrar, srv GenreServiceServer) {
	s.RegisterService(&GenreService_ServiceDesc, srv)
}

func _GenreService_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).CreateGenre(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_UpdateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).UpdateGenre(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_DeleteGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).DeleteGenre(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetByIdGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetByIdGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_GetByIdGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetByIdGenre(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterGenre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_GetAllGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetAllGenres(ctx, req.(*FilterGenre))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreService_ServiceDesc is the grpc.ServiceDesc for GenreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GenreService",
	HandlerType: (*GenreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenre",
			Handler:    _GenreService_CreateGenre_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _GenreService_UpdateGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _GenreService_DeleteGenre_Handler,
		},
		{
			MethodName: "GetByIdGenre",
			Handler:    _GenreService_GetByIdGenre_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _GenreService_GetAllGenres_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genres.proto",
}
